"use strict";(self.webpackChunk_crownfi_csswap_mvp_frontend=self.webpackChunk_crownfi_csswap_mvp_frontend||[]).push([[709],{21709:(s,t,a)=>{a.r(t),a.d(t,{LCDQueryClient:()=>n});var e=a(60141),i=a(35725);class n{constructor({requestClient:s}){(0,e.Z)(this,"req",void 0),this.req=s,this.accounts=this.accounts.bind(this),this.account=this.account.bind(this),this.params=this.params.bind(this),this.moduleAccounts=this.moduleAccounts.bind(this),this.bech32Prefix=this.bech32Prefix.bind(this),this.addressBytesToString=this.addressBytesToString.bind(this),this.addressStringToBytes=this.addressStringToBytes.bind(this)}async accounts(s={pagination:void 0}){const t={params:{}};return void 0!==(null==s?void 0:s.pagination)&&(0,i.q6)(t,s.pagination),await this.req.get("cosmos/auth/v1beta1/accounts",t)}async account(s){const t=`cosmos/auth/v1beta1/accounts/${s.address}`;return await this.req.get(t)}async params(s={}){return await this.req.get("cosmos/auth/v1beta1/params")}async moduleAccounts(s={}){return await this.req.get("cosmos/auth/v1beta1/module_accounts")}async bech32Prefix(s={}){return await this.req.get("cosmos/auth/v1beta1/bech32")}async addressBytesToString(s){const t=`cosmos/auth/v1beta1/bech32/${s.addressBytes}`;return await this.req.get(t)}async addressStringToBytes(s){const t=`cosmos/auth/v1beta1/bech32/${s.addressString}`;return await this.req.get(t)}}}}]);